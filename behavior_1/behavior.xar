<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Python Script" id="5" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="298" y="122"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[# Imports
import traceback
###########################################################################################################################
def look_straight():
    try:
        # Choregraphe bezier export in Python.
        from naoqi import ALProxy
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([0.8])
        keys.append([[0.0168738, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([0.8])
        keys.append([[-0.0460193, [3, -0.333333, 0], [3, 0, 0]]])

        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err
    except:
        self.logger.info(str(traceback.print_exc()))
        self.logger.info("---Problem in upload_current_action---")
###########################################################################################################################
def move_8_5():
    try:
        # Choregraphe bezier export in Python.
        from naoqi import ALProxy
        names = list()
        times = list()
        keys = list()

        names.append("LElbowRoll")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.266667, 0]], [-0.111981, [3, -0.266667, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.4, 0]], [-0.111981, [3, -0.4, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.266667, 0]], [-0.111981, [3, -0.266667, 0], [3, 0.4, 0]], [-0.111981, [3, -0.4, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.111981, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.266667, 0]], [-1.72266, [3, -0.266667, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.4, 0]], [-1.72266, [3, -0.4, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.266667, 0]], [-1.72266, [3, -0.266667, 0], [3, 0.4, 0]], [-1.72266, [3, -0.4, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.72266, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.266667, 0]], [0.662566, [3, -0.266667, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.4, 0]], [0.662566, [3, -0.4, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.266667, 0]], [0.662566, [3, -0.266667, 0], [3, 0.4, 0]], [0.662566, [3, -0.4, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0.333333, 0]], [0.662566, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.266667, 0]], [1.76868, [3, -0.266667, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.4, 0]], [1.76868, [3, -0.4, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.266667, 0]], [1.76868, [3, -0.266667, 0], [3, 0.4, 0]], [1.76868, [3, -0.4, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0.333333, 0]], [1.76868, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.266667, 0]], [0.0536892, [3, -0.266667, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.4, 0]], [0.0536892, [3, -0.4, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.266667, 0]], [0.0536892, [3, -0.266667, 0], [3, 0.4, 0]], [0.0536892, [3, -0.4, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0536892, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[0.0613179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0613179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0613179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0613179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0613179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0613179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0613179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0613179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0613179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0613179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0613179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0613179, [3, -0.333333, 0], [3, 0.266667, 0]], [0.0613179, [3, -0.266667, 0], [3, 0.333333, 0]], [0.0720561, [3, -0.333333, 0], [3, 0.4, 0]], [0.0720561, [3, -0.4, 0], [3, 0.333333, 0]], [0.0720561, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0720561, [3, -0.333333, 0], [3, 0.266667, 0]], [0.0720561, [3, -0.266667, 0], [3, 0.4, 0]], [0.0720561, [3, -0.4, 0], [3, 0.333333, 0]], [0.0720561, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0720561, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0720561, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0720561, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0720561, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0720561, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[0.00766993, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0107379, [3, -0.333333, 0.00536895], [3, 0.333333, -0.00536895]], [-0.0245438, [3, -0.333333, 0], [3, 0.333333, 0]], [0.081301, [3, -0.333333, -0.105845], [3, 0.333333, 0.105845]], [1.59074, [3, -0.333333, 0], [3, 0.333333, 0]], [1.59074, [3, -0.333333, 0], [3, 0.333333, 0]], [1.19344, [3, -0.333333, 0.0260773], [3, 0.333333, -0.0260773]], [1.16736, [3, -0.333333, 0.00536887], [3, 0.333333, -0.00536887]], [1.16122, [3, -0.333333, 0], [3, 0.333333, 0]], [1.16122, [3, -0.333333, 0], [3, 0.333333, 0]], [1.16122, [3, -0.333333, 0], [3, 0.333333, 0]], [1.16122, [3, -0.333333, 0], [3, 0.266667, 0]], [1.02163, [3, -0.266667, 0.0784035], [3, 0.333333, -0.0980044]], [0.632, [3, -0.333333, 0.0873904], [3, 0.4, -0.104868]], [0.444854, [3, -0.4, 0], [3, 0.333333, 0]], [0.478602, [3, -0.333333, 0], [3, 0.333333, 0]], [0.447922, [3, -0.333333, 0], [3, 0.266667, 0]], [0.495476, [3, -0.266667, -0.0198395], [3, 0.4, 0.0297592]], [0.596719, [3, -0.4, 0], [3, 0.333333, 0]], [0.596719, [3, -0.333333, 0], [3, 0.333333, 0]], [0.326738, [3, -0.333333, 0.101498], [3, 0.333333, -0.101498]], [-0.0122719, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0122719, [3, -0.333333, 0], [3, 0.333333, 0]], [0.257709, [3, -0.333333, 0], [3, 0.333333, 0]], [0.230097, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[0.477068, [3, -0.333333, 0], [3, 0.333333, 0]], [0.477068, [3, -0.333333, 0], [3, 0.333333, 0]], [0.477068, [3, -0.333333, 0], [3, 0.333333, 0]], [0.478602, [3, -0.333333, 0], [3, 0.333333, 0]], [0.463262, [3, -0.333333, 0], [3, 0.333333, 0]], [0.463262, [3, -0.333333, 0], [3, 0.333333, 0]], [0.463262, [3, -0.333333, 0], [3, 0.333333, 0]], [0.319068, [3, -0.333333, 0], [3, 0.333333, 0]], [0.319068, [3, -0.333333, 0], [3, 0.333333, 0]], [0.319068, [3, -0.333333, 0], [3, 0.333333, 0]], [0.319068, [3, -0.333333, 0], [3, 0.333333, 0]], [0.319068, [3, -0.333333, 0], [3, 0.266667, 0]], [0.612058, [3, -0.266667, -0.00368155], [3, 0.333333, 0.00460194]], [0.61666, [3, -0.333333, -0.00232422], [3, 0.4, 0.00278907]], [0.627398, [3, -0.4, 0], [3, 0.333333, 0]], [0.615126, [3, -0.333333, 0], [3, 0.333333, 0]], [0.615126, [3, -0.333333, 0], [3, 0.266667, 0]], [0.636602, [3, -0.266667, 0], [3, 0.4, 0]], [0.636602, [3, -0.4, 0], [3, 0.333333, 0]], [0.636602, [3, -0.333333, 0], [3, 0.333333, 0]], [0.625864, [3, -0.333333, 0], [3, 0.333333, 0]], [0.625864, [3, -0.333333, 0], [3, 0.333333, 0]], [0.625864, [3, -0.333333, 0], [3, 0.333333, 0]], [0.625864, [3, -0.333333, 0], [3, 0.333333, 0]], [0.625864, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[0.496485, [3, -0.333333, 0], [3, 0.333333, 0]], [0.496485, [3, -0.333333, 0], [3, 0.333333, 0]], [0.496485, [3, -0.333333, 0], [3, 0.333333, 0]], [0.438489, [3, -0.333333, 0], [3, 0.333333, 0]], [0.438489, [3, -0.333333, 0], [3, 0.333333, 0]], [0.438489, [3, -0.333333, 0], [3, 0.333333, 0]], [0.98, [3, -0.333333, 0], [3, 0.333333, 0]], [0.98, [3, -0.333333, 0], [3, 0.333333, 0]], [0.98, [3, -0.333333, 0], [3, 0.333333, 0]], [0.98, [3, -0.333333, 0], [3, 0.333333, 0]], [0.02, [3, -0.333333, 0], [3, 0.333333, 0]], [0.02, [3, -0.333333, 0], [3, 0.266667, 0]], [0.02, [3, -0.266667, 0], [3, 0.333333, 0]], [0.02, [3, -0.333333, 0], [3, 0.4, 0]], [0.02, [3, -0.4, 0], [3, 0.333333, 0]], [0.02, [3, -0.333333, 0], [3, 0.333333, 0]], [0.02, [3, -0.333333, 0], [3, 0.266667, 0]], [0.98, [3, -0.266667, 0], [3, 0.4, 0]], [0.235501, [3, -0.4, 0], [3, 0.333333, 0]], [0.235501, [3, -0.333333, 0], [3, 0.333333, 0]], [0.235501, [3, -0.333333, 0], [3, 0.333333, 0]], [0.235501, [3, -0.333333, 0], [3, 0.333333, 0]], [0.235501, [3, -0.333333, 0], [3, 0.333333, 0]], [0.235501, [3, -0.333333, 0], [3, 0.333333, 0]], [0.235501, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[1.5079, [3, -0.333333, 0], [3, 0.333333, 0]], [1.52018, [3, -0.333333, 0], [3, 0.333333, 0]], [1.4987, [3, -0.333333, 0.0214757], [3, 0.333333, -0.0214757]], [-1.4266, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.40666, [3, -0.333333, -0.0199416], [3, 0.333333, 0.0199416]], [-0.231631, [3, -0.333333, -0.0276115], [3, 0.333333, 0.0276115]], [-0.20402, [3, -0.333333, -0.0204531], [3, 0.333333, 0.0204531]], [-0.108913, [3, -0.333333, -0.0465308], [3, 0.333333, 0.0465308]], [0.075165, [3, -0.333333, -0.0521554], [3, 0.333333, 0.0521554]], [0.20402, [3, -0.333333, -0.0245435], [3, 0.333333, 0.0245435]], [0.228563, [3, -0.333333, 0], [3, 0.333333, 0]], [0.228563, [3, -0.333333, 0], [3, 0.266667, 0]], [0.0245438, [3, -0.266667, 0.0147263], [3, 0.333333, -0.0184078]], [0.00613594, [3, -0.333333, 0], [3, 0.4, 0]], [0.00613594, [3, -0.4, 0], [3, 0.333333, 0]], [0.161068, [3, -0.333333, -0.0350259], [3, 0.333333, 0.0350259]], [0.216291, [3, -0.333333, 0], [3, 0.266667, 0]], [0.205554, [3, -0.266667, 0.0107376], [3, 0.4, -0.0161065]], [-0.305262, [3, -0.4, 0.124392], [3, 0.333333, -0.10366]], [-0.478602, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.460194, [3, -0.333333, -0.0184076], [3, 0.333333, 0.0184076]], [0.848291, [3, -0.333333, -0.358952], [3, 0.333333, 0.358952]], [1.69352, [3, -0.333333, -0.0107375], [3, 0.333333, 0.0107375]], [1.70425, [3, -0.333333, 0], [3, 0.333333, 0]], [1.70425, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[-0.115049, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.04617, [3, -0.333333, 0.244414], [3, 0.333333, -0.244414]], [-1.58153, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.51557, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.54165, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.20878, [3, -0.333333, -0.17922], [3, 0.333333, 0.17922]], [-0.46633, [3, -0.333333, -0.158767], [3, 0.333333, 0.158767]], [-0.256175, [3, -0.333333, -0.0368156], [3, 0.333333, 0.0368156]], [-0.219359, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.219359, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.219359, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.219359, [3, -0.333333, 0], [3, 0.266667, 0]], [-0.208622, [3, -0.266667, -0.0107377], [3, 0.333333, 0.0134221]], [-0.0199418, [3, -0.333333, -0.0281231], [3, 0.4, 0.0337477]], [0.0138059, [3, -0.4, 0], [3, 0.333333, 0]], [0.0138059, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0138059, [3, -0.333333, 0], [3, 0.266667, 0]], [0.0138059, [3, -0.266667, 0], [3, 0.4, 0]], [-0.734777, [3, -0.4, 0.284484], [3, 0.333333, -0.23707]], [-1.55085, [3, -0.333333, 0.0230098], [3, 0.333333, -0.0230098]], [-1.57386, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.53091, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.54932, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.665748, [3, -0.333333, -0.239301], [3, 0.333333, 0.239301]], [-0.113515, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([0.8, 1.8, 2.8, 3.8, 4.8, 5.8, 6.8, 7.8, 8.8, 9.8, 10.8, 11.8, 12.6, 13.6, 14.8, 15.8, 16.8, 17.6, 18.8, 19.8, 20.8, 21.8, 22.8, 23.8, 24.8])
        keys.append([[1.13358, [3, -0.333333, 0], [3, 0.333333, 0]], [0.990922, [3, -0.333333, 0.0595703], [3, 0.333333, -0.0595703]], [0.776162, [3, -0.333333, 0.21476], [3, 0.333333, -0.21476]], [-1.76568, [3, -0.333333, 0], [3, 0.333333, 0]], [0.049046, [3, -0.333333, 0], [3, 0.333333, 0]], [0.049046, [3, -0.333333, 0], [3, 0.333333, 0]], [0.049046, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.067538, [3, -0.333333, 0.029913], [3, 0.333333, -0.029913]], [-0.130432, [3, -0.333333, 0.0350263], [3, 0.333333, -0.0350263]], [-0.277696, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.277696, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.277696, [3, -0.333333, 0], [3, 0.266667, 0]], [-0.277696, [3, -0.266667, 0], [3, 0.333333, 0]], [-0.458708, [3, -0.333333, 0], [3, 0.4, 0]], [-0.420358, [3, -0.4, 0], [3, 0.333333, 0]], [-0.538476, [3, -0.333333, 0.0240327], [3, 0.333333, -0.0240327]], [-0.564554, [3, -0.333333, 0], [3, 0.266667, 0]], [-0.500126, [3, -0.266667, -0.0560421], [3, 0.4, 0.0840632]], [-0.144238, [3, -0.4, 0], [3, 0.333333, 0]], [-0.145772, [3, -0.333333, 0.00153398], [3, 0.333333, -0.00153398]], [-0.414222, [3, -0.333333, 0], [3, 0.333333, 0]], [0.84826, [3, -0.333333, -0.336713], [3, 0.333333, 0.336713]], [1.60606, [3, -0.333333, 0], [3, 0.333333, 0]], [1.52169, [3, -0.333333, 0], [3, 0.333333, 0]], [1.52169, [3, -0.333333, 0], [3, 0, 0]]])

        try:
          # uncomment the following line and modify the IP if you use this script outside Choregraphe.
          # motion = ALProxy("ALMotion", IP, 9559)
          motion = ALProxy("ALMotion")
          motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err
    except:
        self.logger.info(str(traceback.print_exc()))
        self.logger.info("---Problem in get_current_action---")
###########################################################################################################################
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        # Imports
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # Energise Arm
        motionProxy=ALProxy( "ALMotion" )
        #Example showing how to deactivate "LArm" anticollision
        chainName = "RArm"
        look_straight()
        move_8_5()
        self.onStopped() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>